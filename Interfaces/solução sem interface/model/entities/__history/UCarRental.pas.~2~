unit UCarRental;

interface

uses
  UInvoice, UVehicle;

type
  TcarRental = class
    private
    FStart: TDateTime;
    FFinish:TDateTime;

    FVehicle:TVehicle;
    FInVOice:TInVoice;
    function GetFinish: TDateTime;
    function GetInVoice: TInVoice;
    function GetStart: TDateTime;
    function GetVehicle: TVehicle;
    procedure SetFinish(const Value: TDateTime);
    procedure SetInVoice(const Value: TInVoice);
    procedure SetStart(const Value: TDateTime);
    procedure SetVehicle(const Value: TVehicle);

    public
    property Start: TDateTime read GetStart write SetStart;
    property Finish: TDateTime read GetFinish write SetFinish;
    property Vehicle: TVehicle read GetVehicle write SetVehicle;
    property InVoice: TInVoice read GetInVoice write SetInVoice;
  end;

implementation

{ TcarRental }

function TcarRental.GetFinish: TDateTime;
begin
  result := FFinish;
end;

function TcarRental.GetInVoice: TInVoice;
begin
  result := FInVoice;
end;

function TcarRental.GetStart: TDateTime;
begin
  result := FStart;
end;

function TcarRental.GetVehicle: TVehicle;
begin
  result := FVehicle;
end;

procedure TcarRental.SetFinish(const Value: TDateTime);
begin

end;

procedure TcarRental.SetInVoice(const Value: TInVoice);
begin

end;

procedure TcarRental.SetStart(const Value: TDateTime);
begin

end;

procedure TcarRental.SetVehicle(const Value: TVehicle);
begin

end;

end.
