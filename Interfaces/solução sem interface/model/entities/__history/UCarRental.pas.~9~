unit UCarRental;

interface

uses
  UInvoice, UVehicle;

type
  TcarRental = class
    private
    FStart: TDateTime;
    FFinish: TDateTime;

    FVehicle: TVehicle;
    FInVOice: TInVoice;

    function GetFinish: TDateTime;
    function GetInVoice: TInVoice;
    function GetStart: TDateTime;
    function GetVehicle: TVehicle;

    procedure SetFinish(const Value: TDateTime);
    procedure SetInVoice(const Value: TInVoice);
    procedure SetStart(const Value: TDateTime);
    procedure SetVehicle(const Value: TVehicle);

    public
    constructor Create(aStart, aFinish:TDateTime; aVehicle:TVehicle);

    property Start: TDateTime  read GetStart   write SetStart;
    property Finish: TDateTime read GetFinish  write SetFinish;
    property Vehicle: TVehicle read GetVehicle write SetVehicle;
    property InVoice: TInVoice read GetInVoice write SetInVoice;
  end;

implementation

{ TcarRental }

constructor TcarRental.Create(aStart, aFinish: TDateTime; aVehicle: TVehicle);
begin
  aStart  := Fstart;
  aFinish  := FFinish;
  aVehicle := FVehicle;
end;

function TcarRental.GetFinish: TDateTime;
begin
  result := FFinish;
end;

function TcarRental.GetInVoice: TInVoice;
begin
  result := FInVoice;
end;

function TcarRental.GetStart: TDateTime;
begin
  result := FStart;
end;

function TcarRental.GetVehicle: TVehicle;
begin
  result := FVehicle;
end;

procedure TcarRental.SetFinish(const Value: TDateTime);
begin
  Finish := Value;
end;

procedure TcarRental.SetInVoice(const Value: TInVoice);
begin
  FInVOice := Value;
end;

procedure TcarRental.SetStart(const Value: TDateTime);
begin
  Start := Value;
end;

procedure TcarRental.SetVehicle(const Value: TVehicle);
begin
  FVehicle := Value;
end;

end.
