unit UAnimais;

interface

type
  TEnumANimal = (stCachorro, stGato, stPassaro);

  TAnimal = class
  private
    FPatas: Byte;

    function GetPatas: Byte;
    procedure SetPatas(const aValue: Byte);
  public
    function RetornarSom: String; virtual; abstract;
    property Patas: Byte read GetPatas write SetPatas;
  end;

  TCachorro = class(TAnimal)
  private
  public
    constructor Create;
    function RetornarSom: String; override;
  end;

  TGato = class(TAnimal)
  private
  public
    constructor Create;
    function RetornarSom: String; override;
  end;

  TPassaro = class(TAnimal)
  private
  public
    constructor Create;
    function RetornarSom: String; override;
  end;

implementation

{ TAnimal }

function TAnimal.GetPatas: Byte;
begin
Result := FPatas;
end;

procedure TAnimal.SetPatas(const aValue: Byte);
begin
  FPatas := aValue;
end;

{ TCachorro }

constructor TCachorro.Create;
begin
  FPatas := 4;
end;

function TCachorro.RetornarSom: String;
begin
  result := 'au au'
end;

{ TGato }


function TGato.RetornarSom: String;
begin
  result := 'miau';
end;

end.
