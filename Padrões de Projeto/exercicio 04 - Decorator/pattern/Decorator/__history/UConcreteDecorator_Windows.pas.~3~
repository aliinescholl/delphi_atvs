unit UConcreteDecorator_Windows;

interface

uses
  UDecorator;

type
  TWindowsDecorator = class(TDecorator)
    private
      function ObterVersaoWindows: String;
    protected
      function ObterDadosExcecao:String; override;
  end;

implementation

uses
  System.SysUtils;



{ TWindowsDecorator }

function TWindowsDecorator.ObterDadosExcecao: String;
begin
  result := inherited ObterDadosExcecao;
  result := result + 'Versão do Sistema Operacional: '
    + Self.ObterVersaoWindows;
end;

function TWindowsDecorator.ObterVersaoWindows: String;
var
  xRegistro: TRegistry;
  xMajorVersion: byte;
  xMinorVersion: byte;
begin
  xRegistro := TRegistry.Create;

  try
    xRegistro.RootKey := HKEY_LOCAL_MACHINE;
    xRegistro.OpenKey('Software\Microsoft\Windows NT\CurrenteVersion', False);
    xMajorVersion := xRegistro.ReadInteger('CurrentMajorVersionNumber');
    xMinorVersion := xRegistro.ReadInteger('CurrentMinorVersionNumber');

    case xMajorVersion of
       5: case xMinorVersion of
            1:result := 'Windows XP';
          end;
       6: case xMinorVersion of
            0: result := 'Windows Vista';
            1: result := 'Windows 7';
            2: result := 'Windows 8';
            3: result := 'Windows 8.1';
          end;
       10: case xMinorVersion of
             0: result := 'Windows 10';
           end;
    end;
  finally
    FreeAndNil(xRegistro);
  end;
end;

end.
